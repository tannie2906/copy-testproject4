import random
from random import randrange
from datetime import datetime

# seed rng
random.seed(datetime.now().timestamp())

# nasty nasty you shouldn't look in here...
# expect your script to be tested against DIFFERENT p/q
p = 0xEECFAE81B1B9B3C908810B10A1B5600199EB9F44AEF4FDA493B81A9E3D84F632124EF0236E5D1E3B7E28FAE7AA040A2D5B252176459D1F397541BA2A58FB6599
q = 0xC97FB1F027F453F6341233EAAAD1D9353F6C42D08866B1D05A0F2035028B9D869840B41666B42E92EA0DA3B43204B5CFCE3352524D0416A5A441E700AF461503

n = p * q

# expect your script to be tested for a different d as well!
d = 0xA5DAFC5341FAF289C4B988DB30C1CDF83F31251E0668B42784813801579641B29410B3C7998D6BC465745E5C392669D6870DA2C082A939E37FDCB82EC93EDAC97FF3AD5950ACCFBC111C76F1A9529444E56AAF68C56C092CD38DC3BEF5D20A939926ED4F74A13EDDFBE1A1CECC4894AF9428C2B7B8883FE4463A4BC85B1CB3C1

# e is small here, but your script might be tested with bigger e as well!
e = 17;

print("n = " + hex(n))
print("e = " + hex(e))

dP   = 0x54494CA63EBA0337E4E24023FCD69A5AEB07DDDC0183A4D0AC9B54B051F2B13ED9490975EAB77414FF59C1F7692E9A2E202B38FC910A474174ADC93C1F67C981
dQ   = 0x471E0290FF0AF0750351B7F878864CA961ADBD3A8A7E991C5C0556A94C3146A7F9803F8F6F8AE342E931FD8AE47A220D1B99A495849807FE39F9245A9836DA3D
invQ = 0xB06C4FDABB6301198D265BDBAE9423B380F271F73453885093077FCD39E2119FC98632154F5883B167A967BF402B4E9E2E0F9656E698EA3666EDFB25798039F7

# Test value, make sure it is below n
x = random.getrandbits(1024) % n

print("x = " + hex(x))

# For testing: This is a correct signature on the above value v
# x = 0x1253E04DC0A5397BB44A7AB87E9BF2A039A33D1E996FC82A94CCD30074C95DF763722017069E5268DA5D1C0B4F872CF653C11DF82314A67968DFEAE28DEF04BB6D84B1C31D654A1970E5783BD6EB96A024C2CA2F4A90FE9F2EF5C9C140E5BB48DA9536AD8700C84FC9130ADEA74E558D51A74DDF85D8B50DE96838D6063E0955
# sig_exp = 0x00EB7A19ACE9E3006350E329504B45E2CA82310B26DCD87D5C68F1EEA8F55267C31B2E8BB4251F84D7E0B2C04626F5AFF93EDCFB25C9C2B3FF8AE10E839A2DDB4CDCFE4FF47728B4A1B7C1362BAAD29AB48D2869D5024121435811591BE392F982FB3E87D095AEB40448DB972F3AC14F7BC275195281CE32D2F1B76D4D353E2D

r = randrange(10)

# CRT formula
mp = pow(x, dP, p)

if r <= 1:
	mp = mp ^ 0xabcdef;

mq = pow(x, dQ, q)
diff = (mp - mq)         
h = (invQ * diff)
sig_crt = (mq + h * q) % n

print("signature = " + hex(sig_crt))

#################### SOLUTION FROM HERE #########################

from math import gcd

verified_sig = pow(sig_crt, e, n) # to verify whether CRT-RSA sign is correct

# if recalculated signature matches x, it print no fault and exir
if verified_sig == x:
    print("no fault")
    exit()

# if not match x, scricpt computes gcd as part of lenstra attack
possible_candidate = gcd(diff, n) 

# Check if the gcd resulted in a non-trivial factor of n
if 1 < possible_candidate < n:
    print(f"p = {hex(possible_candidate)}") #the recoverd factor p is printed in hexadecimal format
else:
    print("useless fault") #otherwise print this